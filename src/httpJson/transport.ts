/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * tdex/v1/transport.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from 'url';
import * as isomorphicFetch from 'isomorphic-fetch';
import { Configuration } from './configuration';
import { BASE_PATH, BaseAPI, FetchAPI, FetchArgs } from 'httpJson/common';

/**
 *
 * @export
 * @enum {string}
 */
export enum V1ContentType {
  JSON = <any>'CONTENT_TYPE_JSON',
  GRPC = <any>'CONTENT_TYPE_GRPC',
  GRPCWEB = <any>'CONTENT_TYPE_GRPCWEB',
  GRPCWEBTEXT = <any>'CONTENT_TYPE_GRPCWEBTEXT',
}

/**
 *
 * @export
 * @interface V1SupportedContentTypesResponse
 */
export interface V1SupportedContentTypesResponse {
  /**
   *
   * @type {Array<V1ContentType>}
   * @memberof V1SupportedContentTypesResponse
   */
  acceptedTypes?: Array<V1ContentType>;
}

/**
 * TransportServiceApi - fetch parameter creator
 * @export
 */
export const TransportServiceApiFetchParamCreator = function(
  // @ts-ignore
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transportServiceSupportedContentTypes(options: any = {}): FetchArgs {
      const localVarPath = `/v1/transport`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TransportServiceApi - functional programming interface
 * @export
 */
export const TransportServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transportServiceSupportedContentTypes(
      options?: any
    ): (
      fetch?: FetchAPI,
      basePath?: string
    ) => Promise<V1SupportedContentTypesResponse> {
      const localVarFetchArgs = TransportServiceApiFetchParamCreator(
        configuration
      ).transportServiceSupportedContentTypes(options);
      return (
        fetch: FetchAPI = isomorphicFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * TransportServiceApi - factory interface
 * @export
 */
export const TransportServiceApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transportServiceSupportedContentTypes(options?: any) {
      return TransportServiceApiFp(
        configuration
      ).transportServiceSupportedContentTypes(options)(fetch, basePath);
    },
  };
};

/**
 * TransportServiceApi - object-oriented interface
 * @export
 * @class TransportServiceApi
 * @extends {BaseAPI}
 */
export class TransportServiceApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransportServiceApi
   */
  public transportServiceSupportedContentTypes(options?: any) {
    return TransportServiceApiFp(
      this.configuration
    ).transportServiceSupportedContentTypes(options)(this.fetch, this.basePath);
  }
}
